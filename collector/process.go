// returns data points from Win32_PerfRawData_PerfProc_Process
// https://msdn.microsoft.com/en-us/library/aa394323(v=vs.85).aspx - Win32_PerfRawData_PerfProc_Process class
package collector

import (
	"log"
	"strconv"

	"github.com/StackExchange/wmi"
	"github.com/prometheus/client_golang/prometheus"
)

func init() {
	Factories["process"] = NewProcessCollector
}

// A ProcessCollector is a Prometheus collector for WMI Win32_PerfRawData_PerfProc_Process metrics
type ProcessCollector struct {
	StartTime               *prometheus.Desc
	HandleCount             *prometheus.Desc
	IOOtherBytesTotal       *prometheus.Desc
	IOOtherOperationsTotal  *prometheus.Desc
	IOReadBytesPersec       *prometheus.Desc
	IOReadOperationsPersec  *prometheus.Desc
	IOWriteBytesPersec      *prometheus.Desc
	IOWriteOperationsPersec *prometheus.Desc
	PageFaultsPersec        *prometheus.Desc
	PageFileBytes           *prometheus.Desc
	PageFileBytesPeak       *prometheus.Desc
	PercentPrivilegedTime   *prometheus.Desc
	PercentUserTime         *prometheus.Desc
	PoolNonpagedBytes       *prometheus.Desc
	PoolPagedBytes          *prometheus.Desc
	PriorityBase            *prometheus.Desc
	PrivateBytes            *prometheus.Desc
	ThreadCount             *prometheus.Desc
	VirtualBytes            *prometheus.Desc
	VirtualBytesPeak        *prometheus.Desc
	WorkingSet              *prometheus.Desc
	WorkingSetPeak          *prometheus.Desc
	WorkingSetPrivate       *prometheus.Desc
}

// NewProcessCollector ...
func NewProcessCollector() (Collector, error) {
	const subsystem = "process"
	return &ProcessCollector{
		StartTime: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "start_time"),
			"Time of process start.",
			[]string{"process", "process_id", "creating_process_id"},
			nil,
		),
		HandleCount: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "handle_count"),
			"Total number of handles the process has open. This number is the sum of the handles currently open by each thread in the process.",
			[]string{"process", "process_id", "creating_process_id"},
			nil,
		),
		IOOtherBytesTotal: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "io_other_bytes_total"),
			"Bytes issued to I/O operations that do not involve data, such as control operations. This property counts all I/O activity generated by the process to include file, network, and device I/Os.",
			[]string{"process", "process_id", "creating_process_id"},
			nil,
		),
		IOOtherOperationsTotal: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "io_other_operations_total"),
			"Operations issued I/O that are neither a read or a write request. An example of this type of operation would be a control function. This property counts all I/O activity generated by the process to include file, network, and device I/Os.",
			[]string{"process", "process_id", "creating_process_id"},
			nil,
		),
		IOReadBytesPersec: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "io_read_bytes_persec"),
			"(IOReadBytesPersec)",
			[]string{"process", "process_id", "creating_process_id"},
			nil,
		),
		IOReadOperationsPersec: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "io_read_operations_persec"),
			"(IOReadOperationsPersec)",
			[]string{"process", "process_id", "creating_process_id"},
			nil,
		),
		IOWriteBytesPersec: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "io_write_bytes_persec"),
			"(IOWriteBytesPersec)",
			[]string{"process", "process_id", "creating_process_id"},
			nil,
		),
		IOWriteOperationsPersec: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "io_write_operations_persec"),
			"(IOWriteOperationsPersec)",
			[]string{"process", "process_id", "creating_process_id"},
			nil,
		),
		PageFaultsPersec: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "page_faults_persec"),
			"(PageFaultsPersec)",
			[]string{"process", "process_id", "creating_process_id"},
			nil,
		),
		PageFileBytes: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "page_file_bytes"),
			"(PageFileBytes)",
			[]string{"process", "process_id", "creating_process_id"},
			nil,
		),
		PageFileBytesPeak: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "page_file_bytes_peak"),
			"(PageFileBytesPeak)",
			[]string{"process", "process_id", "creating_process_id"},
			nil,
		),
		PercentPrivilegedTime: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "percent_privileged_time"),
			"(PercentPrivilegedTime)",
			[]string{"process", "process_id", "creating_process_id"},
			nil,
		),
		PercentUserTime: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "percent_user_time"),
			"(PercentUserTime)",
			[]string{"process", "process_id", "creating_process_id"},
			nil,
		),
		PoolNonpagedBytes: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "pool_nonpaged_bytes"),
			"(PoolNonpagedBytes)",
			[]string{"process", "process_id", "creating_process_id"},
			nil,
		),
		PoolPagedBytes: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "pool_paged_bytes"),
			"(PoolPagedBytes)",
			[]string{"process", "process_id", "creating_process_id"},
			nil,
		),
		PriorityBase: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "priority_base"),
			"(PriorityBase)",
			[]string{"process", "process_id", "creating_process_id"},
			nil,
		),
		PrivateBytes: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "private_bytes"),
			"(PrivateBytes)",
			[]string{"process", "process_id", "creating_process_id"},
			nil,
		),
		ThreadCount: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "thread_count"),
			"(ThreadCount)",
			[]string{"process", "process_id", "creating_process_id"},
			nil,
		),
		VirtualBytes: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "virtual_bytes"),
			"(VirtualBytes)",
			[]string{"process", "process_id", "creating_process_id"},
			nil,
		),
		VirtualBytesPeak: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "virtual_bytes_peak"),
			"(VirtualBytesPeak)",
			[]string{"process", "process_id", "creating_process_id"},
			nil,
		),
		WorkingSet: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "working_set"),
			"(WorkingSet)",
			[]string{"process", "process_id", "creating_process_id"},
			nil,
		),
		WorkingSetPeak: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "working_set_peak"),
			"(WorkingSetPeak)",
			[]string{"process", "process_id", "creating_process_id"},
			nil,
		),
		WorkingSetPrivate: prometheus.NewDesc(
			prometheus.BuildFQName(Namespace, subsystem, "working_set_private"),
			"(WorkingSetPrivate)",
			[]string{"process", "process_id", "creating_process_id"},
			nil,
		),
	}, nil
}

// Collect sends the metric values for each metric
// to the provided prometheus Metric channel.
func (c *ProcessCollector) Collect(ch chan<- prometheus.Metric) error {
	if desc, err := c.collect(ch); err != nil {
		log.Println("[ERROR] failed collecting process metrics:", desc, err)
		return err
	}
	return nil
}

type Win32_PerfRawData_PerfProc_Process struct {
	Name                    string
	CreatingProcessID       uint32
	ElapsedTime             uint64
	Frequency_Object        uint64
	HandleCount             uint32
	IDProcess               uint32
	IODataBytesPersec       uint64
	IODataOperationsPersec  uint64
	IOOtherBytesPersec      uint64
	IOOtherOperationsPersec uint64
	IOReadBytesPersec       uint64
	IOReadOperationsPersec  uint64
	IOWriteBytesPersec      uint64
	IOWriteOperationsPersec uint64
	PageFaultsPersec        uint32
	PageFileBytes           uint64
	PageFileBytesPeak       uint64
	PercentPrivilegedTime   uint64
	PercentProcessorTime    uint64
	PercentUserTime         uint64
	PoolNonpagedBytes       uint32
	PoolPagedBytes          uint32
	PriorityBase            uint32
	PrivateBytes            uint64
	ThreadCount             uint32
	Timestamp_Object        uint64
	VirtualBytes            uint64
	VirtualBytesPeak        uint64
	WorkingSet              uint64
	WorkingSetPeak          uint64
	WorkingSetPrivate       uint64
}

func (c *ProcessCollector) collect(ch chan<- prometheus.Metric) (*prometheus.Desc, error) {
	var dst []Win32_PerfRawData_PerfProc_Process
	q := wmi.CreateQuery(&dst, "")
	if err := wmi.Query(q, &dst); err != nil {
		return nil, err
	}

	for _, process := range dst {

		if process.Name == "_Total" {
			continue
		}
		
		pid := strconv.FormatUint(uint64(process.IDProcess), 10)
		cpid := strconv.FormatUint(uint64(process.CreatingProcessID), 10)

		ch <- prometheus.MustNewConstMetric(
			c.StartTime,
			prometheus.GaugeValue,
			// convert from Windows timestamp (1 jan 1601) to unix timestamp (1 jan 1970)
			float64(process.ElapsedTime-116444736000000000)/float64(process.Frequency_Object),
			process.Name,
			pid,
			cpid,
		)

		ch <- prometheus.MustNewConstMetric(
			c.HandleCount,
			prometheus.GaugeValue,
			float64(process.HandleCount),
			process.Name,
			pid,
			cpid,
		)

		ch <- prometheus.MustNewConstMetric(
			c.IOOtherBytesTotal,
			prometheus.CounterValue,
			float64(process.IOOtherBytesPersec),
			process.Name,
			pid,
			cpid,
		)

		ch <- prometheus.MustNewConstMetric(
			c.IOOtherOperationsTotal,
			prometheus.CounterValue,
			float64(process.IOOtherOperationsPersec),
			process.Name,
			pid,
			cpid,
		)

		ch <- prometheus.MustNewConstMetric(
			c.IOReadBytesPersec,
			prometheus.GaugeValue,
			float64(process.IOReadBytesPersec),
			process.Name,
			pid,
			cpid,
		)

		ch <- prometheus.MustNewConstMetric(
			c.IOReadOperationsPersec,
			prometheus.GaugeValue,
			float64(process.IOReadOperationsPersec),
			process.Name,
			pid,
			cpid,
		)

		ch <- prometheus.MustNewConstMetric(
			c.IOWriteBytesPersec,
			prometheus.GaugeValue,
			float64(process.IOWriteBytesPersec),
			process.Name,
			pid,
			cpid,
		)

		ch <- prometheus.MustNewConstMetric(
			c.IOWriteOperationsPersec,
			prometheus.GaugeValue,
			float64(process.IOWriteOperationsPersec),
			process.Name,
			pid,
			cpid,
		)

		ch <- prometheus.MustNewConstMetric(
			c.PageFaultsPersec,
			prometheus.GaugeValue,
			float64(process.PageFaultsPersec),
			process.Name,
			pid,
			cpid,
		)

		ch <- prometheus.MustNewConstMetric(
			c.PageFileBytes,
			prometheus.GaugeValue,
			float64(process.PageFileBytes),
			process.Name,
			pid,
			cpid,
		)

		ch <- prometheus.MustNewConstMetric(
			c.PageFileBytesPeak,
			prometheus.GaugeValue,
			float64(process.PageFileBytesPeak),
			process.Name,
			pid,
			cpid,
		)

		ch <- prometheus.MustNewConstMetric(
			c.PercentPrivilegedTime,
			prometheus.GaugeValue,
			float64(process.PercentPrivilegedTime),
			process.Name,
			pid,
			cpid,
		)

		ch <- prometheus.MustNewConstMetric(
			c.PercentUserTime,
			prometheus.GaugeValue,
			float64(process.PercentUserTime),
			process.Name,
			pid,
			cpid,
		)

		ch <- prometheus.MustNewConstMetric(
			c.PoolNonpagedBytes,
			prometheus.GaugeValue,
			float64(process.PoolNonpagedBytes),
			process.Name,
			pid,
			cpid,
		)

		ch <- prometheus.MustNewConstMetric(
			c.PoolPagedBytes,
			prometheus.GaugeValue,
			float64(process.PoolPagedBytes),
			process.Name,
			pid,
			cpid,
		)

		ch <- prometheus.MustNewConstMetric(
			c.PriorityBase,
			prometheus.GaugeValue,
			float64(process.PriorityBase),
			process.Name,
			pid,
			cpid,
		)

		ch <- prometheus.MustNewConstMetric(
			c.PrivateBytes,
			prometheus.GaugeValue,
			float64(process.PrivateBytes),
			process.Name,
			pid,
			cpid,
		)

		ch <- prometheus.MustNewConstMetric(
			c.ThreadCount,
			prometheus.GaugeValue,
			float64(process.ThreadCount),
			process.Name,
			pid,
			cpid,
		)

		ch <- prometheus.MustNewConstMetric(
			c.VirtualBytes,
			prometheus.GaugeValue,
			float64(process.VirtualBytes),
			process.Name,
			pid,
			cpid,
		)

		ch <- prometheus.MustNewConstMetric(
			c.VirtualBytesPeak,
			prometheus.GaugeValue,
			float64(process.VirtualBytesPeak),
			process.Name,
			pid,
			cpid,
		)

		ch <- prometheus.MustNewConstMetric(
			c.WorkingSet,
			prometheus.GaugeValue,
			float64(process.WorkingSet),
			process.Name,
			pid,
			cpid,
		)

		ch <- prometheus.MustNewConstMetric(
			c.WorkingSetPeak,
			prometheus.GaugeValue,
			float64(process.WorkingSetPeak),
			process.Name,
			pid,
			cpid,
		)

		ch <- prometheus.MustNewConstMetric(
			c.WorkingSetPrivate,
			prometheus.GaugeValue,
			float64(process.WorkingSetPrivate),
			process.Name,
			pid,
			cpid,
		)
	}

	return nil, nil
}
